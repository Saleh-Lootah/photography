{"version":3,"sources":["node_modules/colcade/colcade.js","gallery.js"],"names":["colc","Colcade","columns","items"],"mappings":"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","file":"gallery.d28dcee4.js","sourceRoot":"..","sourcesContent":["/*!\n * Colcade v0.2.0\n * Lightweight masonry layout\n * by David DeSandro\n * MIT license\n */\n\n/*jshint browser: true, undef: true, unused: true */\n\n( function( window, factory ) {\n  // universal module definition\n  /*jshint strict: false */\n  /*global define: false, module: false */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( factory );\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // browser global\n    window.Colcade = factory();\n  }\n\n}( window, function factory() {\n\n// -------------------------- Colcade -------------------------- //\n\nfunction Colcade( element, options ) {\n  element = getQueryElement( element );\n\n  // do not initialize twice on same element\n  if ( element && element.colcadeGUID ) {\n    var instance = instances[ element.colcadeGUID ];\n    instance.option( options );\n    return instance;\n  }\n\n  this.element = element;\n  // options\n  this.options = {};\n  this.option( options );\n  // kick things off\n  this.create();\n}\n\nvar proto = Colcade.prototype;\n\nproto.option = function( options ) {\n  this.options = extend( this.options, options );\n};\n\n// globally unique identifiers\nvar GUID = 0;\n// internal store of all Colcade intances\nvar instances = {};\n\nproto.create = function() {\n  this.errorCheck();\n  // add guid for Colcade.data\n  var guid = this.guid = ++GUID;\n  this.element.colcadeGUID = guid;\n  instances[ guid ] = this; // associate via id\n  // update initial properties & layout\n  this.reload();\n  // events\n  this._windowResizeHandler = this.onWindowResize.bind( this );\n  this._loadHandler = this.onLoad.bind( this );\n  window.addEventListener( 'resize', this._windowResizeHandler );\n  this.element.addEventListener( 'load', this._loadHandler, true );\n};\n\nproto.errorCheck = function() {\n  var errors = [];\n  if ( !this.element ) {\n    errors.push( 'Bad element: ' + this.element );\n  }\n  if ( !this.options.columns ) {\n    errors.push( 'columns option required: ' + this.options.columns );\n  }\n  if ( !this.options.items ) {\n    errors.push( 'items option required: ' + this.options.items );\n  }\n\n  if ( errors.length ) {\n    throw new Error( '[Colcade error] ' + errors.join('. ') );\n  }\n};\n\n// update properties and do layout\nproto.reload = function() {\n  this.updateColumns();\n  this.updateItems();\n  this.layout();\n};\n\nproto.updateColumns = function() {\n  this.columns = querySelect( this.options.columns, this.element );\n};\n\nproto.updateItems = function() {\n  this.items = querySelect( this.options.items, this.element );\n};\n\nproto.getActiveColumns = function() {\n  return this.columns.filter( function( column ) {\n    var style = getComputedStyle( column );\n    return style.display != 'none';\n  });\n};\n\n// ----- layout ----- //\n\n// public, updates activeColumns\nproto.layout = function() {\n  this.activeColumns = this.getActiveColumns();\n  this._layout();\n};\n\n// private, does not update activeColumns\nproto._layout = function() {\n  // reset column heights\n  this.columnHeights = this.activeColumns.map( function() {\n    return 0;\n  });\n  // layout all items\n  this.layoutItems( this.items );\n};\n\nproto.layoutItems = function( items ) {\n  items.forEach( this.layoutItem, this );\n};\n\nproto.layoutItem = function( item ) {\n  // layout item by appending to column\n  var minHeight = Math.min.apply( Math, this.columnHeights );\n  var index = this.columnHeights.indexOf( minHeight );\n  this.activeColumns[ index ].appendChild( item );\n  // at least 1px, if item hasn't loaded\n  // Not exactly accurate, but it's cool\n  this.columnHeights[ index ] += item.offsetHeight || 1;\n};\n\n// ----- adding items ----- //\n\nproto.append = function( elems ) {\n  var items = this.getQueryItems( elems );\n  // add items to collection\n  this.items = this.items.concat( items );\n  // lay them out\n  this.layoutItems( items );\n};\n\nproto.prepend = function( elems ) {\n  var items = this.getQueryItems( elems );\n  // add items to collection\n  this.items = items.concat( this.items );\n  // lay out everything\n  this._layout();\n};\n\nproto.getQueryItems = function( elems ) {\n  elems = makeArray( elems );\n  var fragment = document.createDocumentFragment();\n  elems.forEach( function( elem ) {\n    fragment.appendChild( elem );\n  });\n  return querySelect( this.options.items, fragment );\n};\n\n// ----- measure column height ----- //\n\nproto.measureColumnHeight = function( elem ) {\n  var boundingRect = this.element.getBoundingClientRect();\n  this.activeColumns.forEach( function( column, i ) {\n    // if elem, measure only that column\n    // if no elem, measure all columns\n    if ( !elem || column.contains( elem ) ) {\n      var lastChildRect = column.lastElementChild.getBoundingClientRect();\n      // not an exact calculation as it includes top border, and excludes item bottom margin\n      this.columnHeights[ i ] = lastChildRect.bottom - boundingRect.top;\n    }\n  }, this );\n};\n\n// ----- events ----- //\n\nproto.onWindowResize = function() {\n  clearTimeout( this.resizeTimeout );\n  this.resizeTimeout = setTimeout( function() {\n    this.onDebouncedResize();\n  }.bind( this ), 100 );\n};\n\nproto.onDebouncedResize = function() {\n  var activeColumns = this.getActiveColumns();\n  // check if columns changed\n  var isSameLength = activeColumns.length == this.activeColumns.length;\n  var isSameColumns = true;\n  this.activeColumns.forEach( function( column, i ) {\n    isSameColumns = isSameColumns && column == activeColumns[i];\n  });\n  if ( isSameLength && isSameColumns ) {\n    return;\n  }\n  // activeColumns changed\n  this.activeColumns = activeColumns;\n  this._layout();\n};\n\nproto.onLoad = function( event ) {\n  this.measureColumnHeight( event.target );\n};\n\n// ----- destroy ----- //\n\nproto.destroy = function() {\n  // move items back to container\n  this.items.forEach( function( item ) {\n    this.element.appendChild( item );\n  }, this );\n  // remove events\n  window.removeEventListener( 'resize', this._windowResizeHandler );\n  this.element.removeEventListener( 'load', this._loadHandler, true );\n  // remove data\n  delete this.element.colcadeGUID;\n  delete instances[ this.guid ];\n};\n\n// -------------------------- HTML init -------------------------- //\n\ndocReady( function() {\n  var dataElems = querySelect('[data-colcade]');\n  dataElems.forEach( htmlInit );\n});\n\nfunction htmlInit( elem ) {\n  // convert attribute \"foo: bar, qux: baz\" into object\n  var attr = elem.getAttribute('data-colcade');\n  var attrParts = attr.split(',');\n  var options = {};\n  attrParts.forEach( function( part ) {\n    var pair = part.split(':');\n    var key = pair[0].trim();\n    var value = pair[1].trim();\n    options[ key ] = value;\n  });\n\n  new Colcade( elem, options );\n}\n\nColcade.data = function( elem ) {\n  elem = getQueryElement( elem );\n  var id = elem && elem.colcadeGUID;\n  return id && instances[ id ];\n};\n\n// -------------------------- jQuery -------------------------- //\n\nColcade.makeJQueryPlugin = function( $ ) {\n  $ = $ || window.jQuery;\n  if ( !$ ) {\n    return;\n  }\n\n  $.fn.colcade = function( arg0 /*, arg1 */) {\n    // method call $().colcade( 'method', { options } )\n    if ( typeof arg0 == 'string' ) {\n      // shift arguments by 1\n      var args = Array.prototype.slice.call( arguments, 1 );\n      return methodCall( this, arg0, args );\n    }\n    // just $().colcade({ options })\n    plainCall( this, arg0 );\n    return this;\n  };\n\n  function methodCall( $elems, methodName, args ) {\n    var returnValue;\n    $elems.each( function( i, elem ) {\n      // get instance\n      var colcade = $.data( elem, 'colcade' );\n      if ( !colcade ) {\n        return;\n      }\n      // apply method, get return value\n      var value = colcade[ methodName ].apply( colcade, args );\n      // set return value if value is returned, use only first value\n      returnValue = returnValue === undefined ? value : returnValue;\n    });\n    return returnValue !== undefined ? returnValue : $elems;\n  }\n\n  function plainCall( $elems, options ) {\n    $elems.each( function( i, elem ) {\n      var colcade = $.data( elem, 'colcade' );\n      if ( colcade ) {\n        // set options & init\n        colcade.option( options );\n        colcade.layout();\n      } else {\n        // initialize new instance\n        colcade = new Colcade( elem, options );\n        $.data( elem, 'colcade', colcade );\n      }\n    });\n  }\n};\n\n// try making plugin\nColcade.makeJQueryPlugin();\n\n// -------------------------- utils -------------------------- //\n\nfunction extend( a, b ) {\n  for ( var prop in b ) {\n    a[ prop ] = b[ prop ];\n  }\n  return a;\n}\n\n// turn element or nodeList into an array\nfunction makeArray( obj ) {\n  var ary = [];\n  if ( Array.isArray( obj ) ) {\n    // use object if already an array\n    ary = obj;\n  } else if ( obj && typeof obj.length == 'number' ) {\n    // convert nodeList to array\n    for ( var i=0; i < obj.length; i++ ) {\n      ary.push( obj[i] );\n    }\n  } else {\n    // array of single index\n    ary.push( obj );\n  }\n  return ary;\n}\n\n// get array of elements\nfunction querySelect( selector, elem ) {\n  elem = elem || document;\n  var elems = elem.querySelectorAll( selector );\n  return makeArray( elems );\n}\n\nfunction getQueryElement( elem ) {\n  if ( typeof elem == 'string' ) {\n    elem = document.querySelector( elem );\n  }\n  return elem;\n}\n\nfunction docReady( onReady ) {\n  if ( document.readyState == 'complete' ) {\n    onReady();\n    return;\n  }\n  document.addEventListener( 'DOMContentLoaded', onReady );\n}\n\n// -------------------------- end -------------------------- //\n\nreturn Colcade;\n\n}));\n","import Colcade from 'colcade';\r\n\r\nvar colc = new Colcade( '.grid', {\r\n    columns: '.grid-col',\r\n    items: '.grid-item'\r\n});"]}